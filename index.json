[
{
	"uri": "/",
	"title": "Deploy Hugo Website with Github Pages",
	"tags": [],
	"description": "",
	"content": "Deploy Hugo Website with Github Pages In this Lab, we will learn the steps to deploy Hugo Website with Github Pages.\nNội dung 1. Introduction\n2. Preparation\n3. Create Single Page\n4. Create Multiple Pages\n5. Multiple Pages with CI/CD\n"
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "\nGithub Pages Github Pages is a service created by GitHub that allows publishing a website or web application by hosting it in a free GitHub repository.\nIn this lab, I will show you how to deploy Hugo Static Website through Github Pages in 3 ways:\nCreate Single Page This method will be suitable for anyone who wants to deploy a Website that works on the domain name: https://\u0026lt;github_account\u0026gt;.github.io\nEach Github account can only create a single website with this domain name.\nCreate Multiple Pages This method will be suitable for those who have many repositories, want to deploy many Websites work on the domain name: https://\u0026lt;github_account\u0026gt;.github.io/\u0026lt;repository_name\u0026gt;/\nIt is possible to deploy multiple websites on 1 Github account by adding the name of the repository to the domain name.\nMultiple Pages with CI/CD In this method we will go step by step to build a Multiple Pages and integrate the CI/CD workflow of Github Actions to build and deploy automatically when the developer push the code up to repository. Website will work on domain name: https://\u0026lt;github_account\u0026gt;.github.io/\u0026lt;repository_name\u0026gt;/\nIt is possible to deploy multiple websites on 1 Github account by adding the name of the repository to the domain name.\n"
},
{
	"uri": "/3-singlepage/3.1-sourcecode/",
	"title": "Push Code to Repository",
	"tags": [],
	"description": "",
	"content": "We will proceed to clone our repository that we created in step 2.2 using the following syntax:\ngit clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;github_account\u0026gt;/\u0026lt;repository_name\u0026gt;.git With:\n\u0026lt;your_token\u0026gt; : The token you saved in step 2.1 \u0026lt;github_account\u0026gt; : Your Github account username \u0026lt;repository_name\u0026gt; : Your repository name, in this case \u0026lt;github_account\u0026gt;.github.io Execution Senquence Prepare the screen for work From the Git bash interface\nExecute the command git clone using the above mentioned syntax. Please change the information to suit you git clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;github_account\u0026gt;/\u0026lt;github_account\u0026gt;.github.io.git We will see the \u0026lt;github_account\u0026gt;.github.io folder appears Navigate to the 000058-SessionManager folder Go to public folder Copy all Source Code here Navigate to the \u0026lt;github_account\u0026gt;.github.io folder just cloned above Paste all Source Code just Copy Return to the Git bash interface Navigate to the \u0026lt;github_account\u0026gt;.github.io folder cd \u0026lt;github_account\u0026gt;.github.io Push all Source Code to Repository with commands git add .\rgit commit -m \u0026#34;Add Source Code\u0026#34;\rgit push Access our \u0026lt;github_account\u0026gt;.github.io repository interface on Github, we will see the Source Code with the commit message Add Source Code just appeared "
},
{
	"uri": "/4-multiplepages/4.1-sourcecode/",
	"title": "Push Code to Repository",
	"tags": [],
	"description": "",
	"content": "We will proceed to clone our repository that we created in step 2.2 using the following syntax:\ngit clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;github_account\u0026gt;/\u0026lt;repository_name\u0026gt;.git With:\n\u0026lt;your_token\u0026gt; : The token you saved in step 2.1 \u0026lt;github_account\u0026gt; : Your Github account username \u0026lt;repository_name\u0026gt; : Your repository name, in this case workshop1 Execution Senquence Prepare the screen for work From the Git bash interface\nExecute the command git clone using the above mentioned syntax. Please change the information to suit you git clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;github_account\u0026gt;/workshop1.git We will see the workshop1 folder appears Navigate to the 000058-SessionManager folder Go to public folder Copy all Source Code here Navigate to the workshop1 folder just cloned above Paste all Source Code just Copy Return to the Git bash interface Navigate to the workshop1 folder cd workshop1 Push all Source Code to Repository with commands git add .\rgit commit -m \u0026#34;Add Source Code\u0026#34;\rgit push Access our workshop1 repository interface on Github, we will see the Source Code with the commit message Add Source Code just appeared "
},
{
	"uri": "/5-multiplepagescicd/5.1-sourcecode/",
	"title": "Push Code to Repository",
	"tags": [],
	"description": "",
	"content": "We will proceed to clone our repository that we created in step 2.2 using the following syntax:\ngit clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;github_account\u0026gt;/\u0026lt;repository_name\u0026gt;.git With:\n\u0026lt;your_token\u0026gt; : The token you saved in step 2.1 \u0026lt;github_account\u0026gt; : Your Github account username \u0026lt;repository_name\u0026gt; : Your repository name, in this case workshop2 Execution Senquence Prepare the screen for work From the Git bash interface\nExecute the command git clone using the above mentioned syntax. Please change the information to suit you git clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;github_account\u0026gt;/workshop2.git We will see the workshop2 folder appears Navigate to the 000058-SessionManager folder Copy all Source Code here except public folder Navigate to the workshop2 folder just cloned above Paste all Source Code just Copy Return to the Git bash interface Navigate to the workshop2 folder cd workshop2 Push all Source Code to Repository with commands git add .\rgit commit -m \u0026#34;Add Source Code\u0026#34;\rgit push Access our workshop2 repository interface on Github, we will see the Source Code with the commit message Add Source Code just appeared "
},
{
	"uri": "/2-preparation/2.1-createtoken/",
	"title": "Create Github Access Token",
	"tags": [],
	"description": "",
	"content": "Execution sequence From your Github homepage interface Click on the user avatar icon in the top right corner, select Settings We will be redirected to the Settings page Scroll down to the bottom, select Developer Settings In the Developer Settings page, scroll down to the bottom. In the Personal access tokens field, select Tokens (classic) In the Personal access tokens (classic) field, select Generate new token, then select General new tokens (classic)\n(Note: At this step, Github might ask you to provide your login password) We will be redirected to the New personal access tokens (classic) page In the Note field, enter github_token In the Select scopes field, select two options: repo and workflow Scroll down to the bottom, select Generate token We will be provided with a new token. Save this token for use in the next steps token will only appear once after creation, and it will disappear if you reload the page. So, be sure to save it carefully.\n"
},
{
	"uri": "/2-preparation/2.2-createrepo/",
	"title": "Create Github Repositories",
	"tags": [],
	"description": "",
	"content": "Execution sequence From the main interface of your Github account Click on your avatar in the top right corner, then select Your Profile We will redirected to the Github User page Select Repositories We will create 3 repositories for the next steps\n3. Create Repository for Single Page\nSelect New In the Create a new repository page In the Repository name field, enter \u0026lt;github_account\u0026gt;.github.io (with \u0026lt;github_account\u0026gt; is your Github account\u0026rsquo;s username). In this case, I\u0026rsquo;ll use nhdinh39.github.io In the Description field, enter This is the repository for Single Page Click Create repository Create Repository for Multiple Pages Return to the Github User page, then select Repositories Select New In the Create a new repository page In the Repository name field, enter workshop1 In the Description field, enter This is the repository for Multiple Pages Select Create repository Create Repository for Multiple Pages with CI/CD Return to the Github User page, then choose Repositories Select New In the Create a new repository page In the Repository name field, enter workshop2 In the Description field, enter This is the repository for Multiple Pages with CI/CD Select Create repository Completing the creation of 3 Repositories "
},
{
	"uri": "/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this step, we will take turns:\nCreate 1 Github Access Token Create 3 Github Repositories Prepare Hugo Source Code Nội dung 2.1 Create Access Token 2.2 Create Github Repositories 2.3 Prepare Hugo Source Code\n"
},
{
	"uri": "/3-singlepage/3.2-githubpages/",
	"title": "Work with Github Pages",
	"tags": [],
	"description": "",
	"content": "Execution Sequence From our \u0026lt;github_account\u0026gt;.github.io repository interface on Github Select Settings We will be redirected to the Settings page Select Pages In the Source field, select Github Actions In the Static HTML field, select Configure We will be redirected to the Edit Workflows page Select Commit changes\u0026hellip; Commit changes interface appears, select Commit changes "
},
{
	"uri": "/4-multiplepages/4.2-githubpages/",
	"title": "Work with Github Pages",
	"tags": [],
	"description": "",
	"content": "Execution Sequence From our workshop1 repository interface on Github Select Settings We will be redirected to the Settings page Select Pages In the Source field, select Github Actions In the Static HTML field, select Configure We will be redirected to the Edit Workflows page Select Commit changes\u0026hellip; Commit changes interface appears, select Commit changes "
},
{
	"uri": "/5-multiplepagescicd/5.2-githubpages/",
	"title": "Work with Github Pages",
	"tags": [],
	"description": "",
	"content": "Execution Sequence From our workshop2 repository interface on Github Select Settings We will be redirected to the Settings page Select Pages In the Source field, select Github Actions In the Hugo field, chọn Configure We will be redirected to the Edit Workflows page We proceed to edit run: |\rhugo \\\r--minify \\\r--baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; To run: |\rhugo --minify Select Commit changes\u0026hellip; Commit changes interface appears, select Commit changes "
},
{
	"uri": "/3-singlepage/3.3-check/",
	"title": "Check Website",
	"tags": [],
	"description": "",
	"content": "Execution Sequence From our \u0026lt;github_account\u0026gt;.github.io repository interface on Github Select Actions We will be redirected to the Actions interface, we will see a Create static.yml workflow running, this is the commit message that we made in step 3.2 Wait for the Create static.yml workflow to complete\nSelect Create static.yml We will be redirected to the workflow details page Create static.yml In the deploy section we will see the link of our website, select it We will see our website is working on the domain name https://\u0026lt;github_account\u0026gt;.github.io So we have completed Create Single Page with Hugo Source Code on our own Repository\n"
},
{
	"uri": "/4-multiplepages/4.3-check/",
	"title": "Check Website",
	"tags": [],
	"description": "",
	"content": "Execution Sequence From our workshop1 repository interface on Github Select Actions We will be redirected to the Actions interface, we will see a Create static.yml workflow running, this is the commit message that we made in step 4.2 Wait for the Create static.yml workflow to complete\nSelect Create static.yml We will be redirected to the workflow details page Create static.yml In the deploy section we will see the link of our website, select it We will see our website is working on the domain name https://\u0026lt;github_account\u0026gt;.github.io/workshop1/ So we have completed Create Multiple Pages with Hugo Source Code on our own Repository\n"
},
{
	"uri": "/5-multiplepagescicd/5.3-check/",
	"title": "Check Website",
	"tags": [],
	"description": "",
	"content": "Execution Sequence From our workshop2 repository interface on Github Select Actions We will be redirected to the Actions interface, we will see a Create static.yml workflow running, this is the commit message that we made in step 5.2 Wait for the Create static.yml workflow to complete\nSelect Create static.yml We will be redirected to the workflow details page Create static.yml In the deploy section we will see the link of our website, select it We will see our website is working on the domain name https://\u0026lt;github_account\u0026gt;.github.io/workshop2/ So we have completed Create Multiple Pages by CI/CD process through Github Actions. Next we will proceed to Update Code and then Check Website Again\n"
},
{
	"uri": "/3-singlepage/",
	"title": "Create Single Page",
	"tags": [],
	"description": "",
	"content": "This method will be suitable for anyone who wants to deploy a Website that works in the domain: https://\u0026lt;github_account\u0026gt;.github.io\nResources required for this step:\nGithub Repository: \u0026lt;github_account\u0026gt;.github.io, which you created in step 2.2 Source Code within the public directory, which has been rebuilt after running the hugo command in step 2.3 Content 3.1 Push Code to Repository\n3.2 Work with Github Pages\n3.3 Check Website\n"
},
{
	"uri": "/2-preparation/2.3-preparecode/",
	"title": "Prepare Source Code",
	"tags": [],
	"description": "",
	"content": "\rBefore proceeding with the steps below, make sure that you have Git Bash installed on your computer.\nIf not, you can download it here: Download Git Bash\nExecution sequence Create a new directory on your computer. I\u0026rsquo;m naming it as WORKSHOP. Copy your Hugo Source Code folder into the WORKSHOP directory.\nHere we are using a Sample Source Code. You can Download the Sample Source Code, then unzip it into the WORKSHOP directory with the name 000058-SessionManager Navigate into the 000058-SessionManager directory\nRight-click in an empty area of the folder, then choose Git Bash Here The Git Bash interface will appear. Press the Windows key along with the right arrow 🡒 or left arrow ⭠ to split the screen into two windows.\nOn the right is the Git Bash window, and on the left is the 000058-SessionManager directory for easier operations in the following steps. (This is optional) In the Git Bash interface, execute the following commands: Display the first 10 lines of the config.toml file: head -10 config.toml Add the relativeURLs=true attribute to the first line of the config.toml file sed -i \u0026#39;1 i\\relativeURLs = true\u0026#39; config.toml Displays the first 10 lines of the config.toml file after changing, has added the relativeURLs = true attribute in the first line head -10 config.toml Rebuild Hugo Source Code after making changes in the config.toml file hugo Adding the relativeURLs = true attribute to the first line of the config.toml file is the key step of this Lab.\nIt will update all resource paths like css, images, \u0026hellip; to relative paths, ensuring correct resource retrieval later.\n"
},
{
	"uri": "/4-multiplepages/",
	"title": "Create Multiple Pages",
	"tags": [],
	"description": "",
	"content": "This method will be suitable for those who have many repositories, want to deploy many Websites work on the domain name: https://\u0026lt;github_account\u0026gt;.github.io/\u0026lt;repository_name\u0026gt;/\nResources required for this step:\nGithub Repository: workshop1, which you created in step 2.2 Source Code within the public directory, which has been rebuilt after running the hugo command in step 2.3 Content 4.1 Push Code to Repository\n4.2 Work with Github Pages\n4.3 Check Website\n"
},
{
	"uri": "/5-multiplepagescicd/5.4-updatecode/",
	"title": "Update Code",
	"tags": [],
	"description": "",
	"content": "\rBefore proceeding with the steps below, ensure that you have installed Visual Studio Code on your computer.\nIf not, you can download them here: Download Visual Studio Code\nExcecution Sequence In the Git bash interface Execute the command git pull to update all the latest changes from your Github Repository workshop2 to your local machine git pull Execute the command code . to open the current directory with Visual Studio Code code . In the Visual Studio Code interface that has just opened In the content folder, select _index.md, we make changes # Work with Amazon System Manager - Session Manager To # Work with Amazon System Manager - Session Manager - CI/CD Save the changes. And exit Visual Studio Code\nReturn to the Git bash interface and proceed to push code on our Github Repository.\nBy executing the following commands\ngit add .\rgit commit -m \u0026#34;Edit Source Code\u0026#34;\rgit push "
},
{
	"uri": "/5-multiplepagescicd/5.5-checkagain/",
	"title": "Check Website Again",
	"tags": [],
	"description": "",
	"content": "Execution Sequence Return to the Actions interface of our workshop2 repository\nWe will see a Edit Source Code workflow running, this is the commit message that we made in step 5.4 Wait for the Edit Source Code workflow to complete We reload the website in step 5.3 or select Edit Source Code to access the link https://\u0026lt;github_account\u0026gt;.github.io/workshop2/\nNow the text # Work with Amazon System Manager - Session Manager - CI/CD that we edited in step 5.4 appears So you have completed Create Multiple Page using CI/CD process through Github Actions.\nCongratulations, by this step, you have certainly chosen for yourself how to deploy Hugo Website with Github Pages\n"
},
{
	"uri": "/5-multiplepagescicd/",
	"title": "Multiple Pages with CI/CD",
	"tags": [],
	"description": "",
	"content": "In this method we will go step by step to build a Multiple Pages and integrate the CI/CD workflow of Github Actions to build and deploy automatically when the developer push the code up to repository. Website will work on domain name: https://\u0026lt;github_account\u0026gt;.github.io/\u0026lt;repository_name\u0026gt;/\nResources required for this step:\nGithub Repository: workshop2, which you created in step 2.2 All Hugo Source Code except public folder Content 5.1 Push Code to Repository\n5.2 Work with Github Pages\n5.3 Check Website\n5.4 Update Code\n5.5 Check Website Again\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]